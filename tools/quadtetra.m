function [bary, w] = quadtetra(order)
%TETRA_QUAD_RULES  Symmetric cubature rules on the reference tetrahedron
%
%   [BARY, W] = TETRA_QUAD_RULES(P) returns barycentric coordinates BARY
%   (N-by-4) and positive weights W (N-by-1) that integrate exactly all
%   polynomials of total degree <= P on the standard tetrahedron
%
%       T = { x in R^3 | x_i >= 0,  x1 + x2 + x3 <= 1 } .
%
%   Currently P = 8 or 14 are available, with N = 46 and 236 points,
%   respectively.  The weights already include the volume |T| = 1/6.
%
%   Example:
%       [bary, w] = tetra_quad_rules(8);
%       % convert barycentric -> Cartesian
%       xyz = bary(:,1:3);
%       f  = rand(size(xyz,1),1);          % any function values
%       I  = w.'*f;                        % numerical integral
%
%   References:
%     -  Y. Zhang, C. Cui, and Q. Liu, "A set of symmetric quadrature rules
%        on a tetrahedron", Journal of Computational Mathematics, 2009.
%
%   (c) 2025  HWC demo.  MIT license.
%

switch order
    case 8
        % orbit parameters -----------------------------------------------
        S31  = [ ...
            0.0396754230703899, 0.006397147779902321; ...
            0.31448780069809631, 0.040190448020966172; ...
            0.10198669306270330, 0.024307975504770321; ...
            0.18420369694919151, 0.054858892413697440 ];
        S22  = [ 0.06343628775453989, 0.035719612234099182 ];
        S211 = [ ...
            0.021690162067728005, 0.71993192203946594, 0.007183190697852539; ...
            0.20448008063679571, 0.58057719012880922, 0.016372181945319118 ];
        % build point set -------------------------------------------------
        bary = zeros(46,4);
        w    = zeros(46,1);
        id = 0;
        % S31 orbits (4 pts each)
        for k = 1:size(S31,1)
            [pts, ww] = orbit_S31(S31(k,1), S31(k,2));
            bary(id+(1:4),:) = pts;  w(id+(1:4)) = ww; id = id+4;
        end
        % S22 orbit (6 pts)
        [pts, ww] = orbit_S22(S22(1), S22(2));
        bary(id+(1:6),:) = pts;  w(id+(1:6)) = ww; id = id+6;
        % S211 orbits (12 pts each)
        for k = 1:size(S211,1)
            [pts, ww] = orbit_S211(S211(k,1), S211(k,2), S211(k,3));
            bary(id+(1:12),:) = pts; w(id+(1:12)) = ww; id = id+12;
        end

    case 14
        % S31 (a, w)
        S31 = [ ...
            0.32725336252384856, 0.004065113665270767; ...
            0.044761304466685081, 0.002214538533445578; ...
            0.086140331102436354, 0.005813438267888451; ...
            0.20876264250043230, 0.019625543385835722; ...
            0.014104973802920960, 0.000387573790590821 ];
        % S211 (a, b, w)
        S211 = [ ...
            0.102165324180776812, 0.57394636759433382, 0.011642971972177037; ...
            0.407570051660010716, 0.092227870139020130, 0.005289042988281713; ...
            0.015664000740280359, 0.70128109595894403, 0.001831085416360056; ...
            0.225496356252502905, 0.47690639744208871, 0.008249647377214645 ];
        % S1111 (a, b, c, w)
        S1111 = [ ...
            0.39059842812814580, 0.20135905441239222, 0.01611228807103003, 0.003009924534708245; ...
            0.10613506799890215, 0.03273581868172693, 0.00359790765372717, 0.000804716561736753; ...
            0.56363837316977439, 0.23029207223006575, 0.19071993417435519, 0.002985041258849307; ...
            0.36762550953258608, 0.20788513802300449, 0.33121048851934490, 0.005689600241876077; ...
            0.71923236898172953, 0.17632791180193298, 0.02076023625713101, 0.004159086587854572; ...
            0.52782499521529873, 0.43728908922034182, 0.00922016518566420, 0.000728238920457272; ...
            0.54836745449481907, 0.34478155061716412, 0.08672172833222154, 0.005432650076995825 ];
        % build point set -------------------------------------------------
        bary = zeros(236,4);
        w    = zeros(236,1);
        id = 0;
        % S31
        for k = 1:size(S31,1)
            [pts, ww] = orbit_S31(S31(k,1), S31(k,2));
            bary(id+(1:4),:) = pts;  w(id+(1:4)) = ww; id = id+4;
        end
        % S211
        for k = 1:size(S211,1)
            [pts, ww] = orbit_S211(S211(k,1), S211(k,2), S211(k,3));
            bary(id+(1:12),:) = pts;  w(id+(1:12)) = ww; id = id+12;
        end
        % S1111
        for k = 1:size(S1111,1)
            [pts, ww] = orbit_S1111(S1111(k,1), S1111(k,2), S1111(k,3), S1111(k,4));
            bary(id+(1:24),:) = pts;  w(id+(1:24)) = ww; id = id+24;
        end

    otherwise
        error('tetra_quad_rules:unsupported', 'Only orders 8 and 14 are implemented.');
end

% -------------------------------------------------------------------------
function [pts, wv] = orbit_S31(a, w)
    pts = [ a a a 1-3*a; ...
            a a 1-3*a a; ...
            a 1-3*a a a; ...
            1-3*a a a a ];
    wv  = repmat(w,4,1);
end

function [pts, wv] = orbit_S22(a, w)
    pts = [ a a 0.5-a 0.5-a; ...
            a 0.5-a a 0.5-a; ...
            a 0.5-a 0.5-a a; ...
            0.5-a a a 0.5-a; ...
            0.5-a a 0.5-a a; ...
            0.5-a 0.5-a a a ];
    wv  = repmat(w,6,1);
end

function [pts, wv] = orbit_S211(a, b, w)
    c = 1-2*a-b;
    pts = [ a a b c; ...
            a b a c; ...
            b a a c; ...
            a a c b; ...
            a c a b; ...
            c a a b; ...
            a b c a; ...
            b a c a; ...
            b c a a; ...
            a c b a; ...
            c a b a; ...
            c b a a ];
    wv = repmat(w,12,1);
end

function [pts, wv] = orbit_S1111(a, b, c, w)
    d = 1-a-b-c;
    pts = [ a b c d; ...
            a b d c; ...
            a c b d; ...
            a c d b; ...
            a d b c; ...
            a d c b; ...
            b a c d; ...
            b a d c; ...
            b c a d; ...
            b c d a; ...
            b d a c; ...
            b d c a; ...
            c a b d; ...
            c a d b; ...
            c b a d; ...
            c b d a; ...
            c d a b; ...
            c d b a; ...
            d a b c; ...
            d a c b; ...
            d b a c; ...
            d b c a; ...
            d c a b; ...
            d c b a ];
    wv = repmat(w,24,1);
end

end